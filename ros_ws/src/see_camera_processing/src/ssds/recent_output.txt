lib.ssds_train - INFO - ===> Loading data
loading annotations into memory...
Done (t=0.04s)
creating index...
index created!
loading annotations into memory...
Done (t=0.02s)
creating index...
index created!
loading annotations into memory...
Done (t=0.02s)
creating index...
index created!
loading annotations into memory...
Done (t=0.05s)
creating index...
index created!
loading annotations into memory...
Done (t=0.02s)
creating index...
index created!
lib.ssds_train - INFO - ===> Building model
==>Model blocks:
RFB(
  (base): ModuleList(
    (0): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)
    (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU(inplace)
    (3): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
    (4): _bottleneck(
      (conv1): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU()
      (downsample): Sequential(
        (0): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (5): _bottleneck(
      (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU()
    )
    (6): _bottleneck(
      (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU()
    )
    (7): _bottleneck(
      (conv1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU()
      (downsample): Sequential(
        (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (8): _bottleneck(
      (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU()
    )
    (9): _bottleneck(
      (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU()
    )
    (10): _bottleneck(
      (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU()
    )
    (11): _bottleneck(
      (conv1): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU()
      (downsample): Sequential(
        (0): Conv2d(512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False)
        (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (12): _bottleneck(
      (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU()
    )
    (13): _bottleneck(
      (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU()
    )
    (14): _bottleneck(
      (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU()
    )
    (15): _bottleneck(
      (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU()
    )
    (16): _bottleneck(
      (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU()
    )
  )
  (norm): ModuleList(
    (0): BasicRFB_a(
      (branch0): Sequential(
        (0): BasicConv(
          (conv): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn): BatchNorm2d(128, eps=1e-05, momentum=0.01, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (1): BasicConv(
          (conv): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn): BatchNorm2d(128, eps=1e-05, momentum=0.01, affine=True, track_running_stats=True)
        )
      )
      (branch1): Sequential(
        (0): BasicConv(
          (conv): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn): BatchNorm2d(128, eps=1e-05, momentum=0.01, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (1): BasicConv(
          (conv): Conv2d(128, 128, kernel_size=(3, 1), stride=(1, 1), padding=(1, 0), bias=False)
          (bn): BatchNorm2d(128, eps=1e-05, momentum=0.01, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (2): BasicConv(
          (conv): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(3, 3), dilation=(3, 3), bias=False)
          (bn): BatchNorm2d(128, eps=1e-05, momentum=0.01, affine=True, track_running_stats=True)
        )
      )
      (branch2): Sequential(
        (0): BasicConv(
          (conv): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn): BatchNorm2d(128, eps=1e-05, momentum=0.01, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (1): BasicConv(
          (conv): Conv2d(128, 128, kernel_size=(1, 3), stride=(1, 1), padding=(0, 1), bias=False)
          (bn): BatchNorm2d(128, eps=1e-05, momentum=0.01, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (2): BasicConv(
          (conv): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(3, 3), dilation=(3, 3), bias=False)
          (bn): BatchNorm2d(128, eps=1e-05, momentum=0.01, affine=True, track_running_stats=True)
        )
      )
      (branch3): Sequential(
        (0): BasicConv(
          (conv): Conv2d(512, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn): BatchNorm2d(64, eps=1e-05, momentum=0.01, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (1): BasicConv(
          (conv): Conv2d(64, 96, kernel_size=(1, 3), stride=(1, 1), padding=(0, 1), bias=False)
          (bn): BatchNorm2d(96, eps=1e-05, momentum=0.01, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (2): BasicConv(
          (conv): Conv2d(96, 128, kernel_size=(3, 1), stride=(1, 1), padding=(1, 0), bias=False)
          (bn): BatchNorm2d(128, eps=1e-05, momentum=0.01, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (3): BasicConv(
          (conv): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(5, 5), dilation=(5, 5), bias=False)
          (bn): BatchNorm2d(128, eps=1e-05, momentum=0.01, affine=True, track_running_stats=True)
        )
      )
      (ConvLinear): BasicConv(
        (conv): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn): BatchNorm2d(512, eps=1e-05, momentum=0.01, affine=True, track_running_stats=True)
      )
      (shortcut): BasicConv(
        (conv): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn): BatchNorm2d(512, eps=1e-05, momentum=0.01, affine=True, track_running_stats=True)
      )
      (relu): ReLU()
    )
    (1): BasicRFB(
      (branch0): Sequential(
        (0): BasicConv(
          (conv): Conv2d(1024, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn): BatchNorm2d(128, eps=1e-05, momentum=0.01, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (1): BasicConv(
          (conv): Conv2d(128, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn): BatchNorm2d(256, eps=1e-05, momentum=0.01, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (2): BasicConv(
          (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(3, 3), dilation=(3, 3), bias=False)
          (bn): BatchNorm2d(256, eps=1e-05, momentum=0.01, affine=True, track_running_stats=True)
        )
      )
      (branch1): Sequential(
        (0): BasicConv(
          (conv): Conv2d(1024, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn): BatchNorm2d(128, eps=1e-05, momentum=0.01, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (1): BasicConv(
          (conv): Conv2d(128, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn): BatchNorm2d(192, eps=1e-05, momentum=0.01, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (2): BasicConv(
          (conv): Conv2d(192, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn): BatchNorm2d(256, eps=1e-05, momentum=0.01, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (3): BasicConv(
          (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(5, 5), dilation=(5, 5), bias=False)
          (bn): BatchNorm2d(256, eps=1e-05, momentum=0.01, affine=True, track_running_stats=True)
        )
      )
      (ConvLinear): BasicConv(
        (conv): Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn): BatchNorm2d(1024, eps=1e-05, momentum=0.01, affine=True, track_running_stats=True)
      )
      (shortcut): BasicConv(
        (conv): Conv2d(1024, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn): BatchNorm2d(1024, eps=1e-05, momentum=0.01, affine=True, track_running_stats=True)
      )
      (relu): ReLU()
    )
  )
  (extras): ModuleList(
    (0): BasicRFB(
      (branch0): Sequential(
        (0): BasicConv(
          (conv): Conv2d(1024, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn): BatchNorm2d(128, eps=1e-05, momentum=0.01, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (1): BasicConv(
          (conv): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
          (bn): BatchNorm2d(256, eps=1e-05, momentum=0.01, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (2): BasicConv(
          (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(3, 3), dilation=(3, 3), bias=False)
          (bn): BatchNorm2d(256, eps=1e-05, momentum=0.01, affine=True, track_running_stats=True)
        )
      )
      (branch1): Sequential(
        (0): BasicConv(
          (conv): Conv2d(1024, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn): BatchNorm2d(128, eps=1e-05, momentum=0.01, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (1): BasicConv(
          (conv): Conv2d(128, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn): BatchNorm2d(192, eps=1e-05, momentum=0.01, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (2): BasicConv(
          (conv): Conv2d(192, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
          (bn): BatchNorm2d(256, eps=1e-05, momentum=0.01, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (3): BasicConv(
          (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(5, 5), dilation=(5, 5), bias=False)
          (bn): BatchNorm2d(256, eps=1e-05, momentum=0.01, affine=True, track_running_stats=True)
        )
      )
      (ConvLinear): BasicConv(
        (conv): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn): BatchNorm2d(512, eps=1e-05, momentum=0.01, affine=True, track_running_stats=True)
      )
      (shortcut): BasicConv(
        (conv): Conv2d(1024, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)
        (bn): BatchNorm2d(512, eps=1e-05, momentum=0.01, affine=True, track_running_stats=True)
      )
      (relu): ReLU()
    )
  )
  (loc): ModuleList(
    (0): Conv2d(512, 24, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (1): Conv2d(1024, 24, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (2): Conv2d(512, 24, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
  (conf): ModuleList(
    (0): Conv2d(512, 24, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (1): Conv2d(1024, 24, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (2): Conv2d(512, 24, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
  (softmax): Softmax()
)
==>Feature map size:
[(38, 38), (19, 19), (10, 10)]
lib.ssds_train - INFO - Utilize GPUs for computation
lib.ssds_train - INFO - Number of GPU available: 2
lib.ssds_train - INFO - Model architectures:
RFB(
  (base): ModuleList(
    (0): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)
    (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU(inplace)
    (3): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
    (4): _bottleneck(
      (conv1): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU()
      (downsample): Sequential(
        (0): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (5): _bottleneck(
      (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU()
    )
    (6): _bottleneck(
      (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU()
    )
    (7): _bottleneck(
      (conv1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU()
      (downsample): Sequential(
        (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (8): _bottleneck(
      (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU()
    )
    (9): _bottleneck(
      (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU()
    )
    (10): _bottleneck(
      (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU()
    )
    (11): _bottleneck(
      (conv1): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU()
      (downsample): Sequential(
        (0): Conv2d(512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False)
        (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (12): _bottleneck(
      (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU()
    )
    (13): _bottleneck(
      (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU()
    )
    (14): _bottleneck(
      (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU()
    )
    (15): _bottleneck(
      (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU()
    )
    (16): _bottleneck(
      (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU()
    )
  )
  (norm): ModuleList(
    (0): BasicRFB_a(
      (branch0): Sequential(
        (0): BasicConv(
          (conv): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn): BatchNorm2d(128, eps=1e-05, momentum=0.01, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (1): BasicConv(
          (conv): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn): BatchNorm2d(128, eps=1e-05, momentum=0.01, affine=True, track_running_stats=True)
        )
      )
      (branch1): Sequential(
        (0): BasicConv(
          (conv): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn): BatchNorm2d(128, eps=1e-05, momentum=0.01, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (1): BasicConv(
          (conv): Conv2d(128, 128, kernel_size=(3, 1), stride=(1, 1), padding=(1, 0), bias=False)
          (bn): BatchNorm2d(128, eps=1e-05, momentum=0.01, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (2): BasicConv(
          (conv): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(3, 3), dilation=(3, 3), bias=False)
          (bn): BatchNorm2d(128, eps=1e-05, momentum=0.01, affine=True, track_running_stats=True)
        )
      )
      (branch2): Sequential(
        (0): BasicConv(
          (conv): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn): BatchNorm2d(128, eps=1e-05, momentum=0.01, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (1): BasicConv(
          (conv): Conv2d(128, 128, kernel_size=(1, 3), stride=(1, 1), padding=(0, 1), bias=False)
          (bn): BatchNorm2d(128, eps=1e-05, momentum=0.01, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (2): BasicConv(
          (conv): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(3, 3), dilation=(3, 3), bias=False)
          (bn): BatchNorm2d(128, eps=1e-05, momentum=0.01, affine=True, track_running_stats=True)
        )
      )
      (branch3): Sequential(
        (0): BasicConv(
          (conv): Conv2d(512, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn): BatchNorm2d(64, eps=1e-05, momentum=0.01, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (1): BasicConv(
          (conv): Conv2d(64, 96, kernel_size=(1, 3), stride=(1, 1), padding=(0, 1), bias=False)
          (bn): BatchNorm2d(96, eps=1e-05, momentum=0.01, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (2): BasicConv(
          (conv): Conv2d(96, 128, kernel_size=(3, 1), stride=(1, 1), padding=(1, 0), bias=False)
          (bn): BatchNorm2d(128, eps=1e-05, momentum=0.01, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (3): BasicConv(
          (conv): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(5, 5), dilation=(5, 5), bias=False)
          (bn): BatchNorm2d(128, eps=1e-05, momentum=0.01, affine=True, track_running_stats=True)
        )
      )
      (ConvLinear): BasicConv(
        (conv): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn): BatchNorm2d(512, eps=1e-05, momentum=0.01, affine=True, track_running_stats=True)
      )
      (shortcut): BasicConv(
        (conv): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn): BatchNorm2d(512, eps=1e-05, momentum=0.01, affine=True, track_running_stats=True)
      )
      (relu): ReLU()
    )
    (1): BasicRFB(
      (branch0): Sequential(
        (0): BasicConv(
          (conv): Conv2d(1024, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn): BatchNorm2d(128, eps=1e-05, momentum=0.01, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (1): BasicConv(
          (conv): Conv2d(128, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn): BatchNorm2d(256, eps=1e-05, momentum=0.01, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (2): BasicConv(
          (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(3, 3), dilation=(3, 3), bias=False)
          (bn): BatchNorm2d(256, eps=1e-05, momentum=0.01, affine=True, track_running_stats=True)
        )
      )
      (branch1): Sequential(
        (0): BasicConv(
          (conv): Conv2d(1024, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn): BatchNorm2d(128, eps=1e-05, momentum=0.01, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (1): BasicConv(
          (conv): Conv2d(128, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn): BatchNorm2d(192, eps=1e-05, momentum=0.01, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (2): BasicConv(
          (conv): Conv2d(192, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn): BatchNorm2d(256, eps=1e-05, momentum=0.01, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (3): BasicConv(
          (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(5, 5), dilation=(5, 5), bias=False)
          (bn): BatchNorm2d(256, eps=1e-05, momentum=0.01, affine=True, track_running_stats=True)
        )
      )
      (ConvLinear): BasicConv(
        (conv): Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn): BatchNorm2d(1024, eps=1e-05, momentum=0.01, affine=True, track_running_stats=True)
      )
      (shortcut): BasicConv(
        (conv): Conv2d(1024, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn): BatchNorm2d(1024, eps=1e-05, momentum=0.01, affine=True, track_running_stats=True)
      )
      (relu): ReLU()
    )
  )
  (extras): ModuleList(
    (0): BasicRFB(
      (branch0): Sequential(
        (0): BasicConv(
          (conv): Conv2d(1024, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn): BatchNorm2d(128, eps=1e-05, momentum=0.01, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (1): BasicConv(
          (conv): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
          (bn): BatchNorm2d(256, eps=1e-05, momentum=0.01, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (2): BasicConv(
          (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(3, 3), dilation=(3, 3), bias=False)
          (bn): BatchNorm2d(256, eps=1e-05, momentum=0.01, affine=True, track_running_stats=True)
        )
      )
      (branch1): Sequential(
        (0): BasicConv(
          (conv): Conv2d(1024, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn): BatchNorm2d(128, eps=1e-05, momentum=0.01, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (1): BasicConv(
          (conv): Conv2d(128, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn): BatchNorm2d(192, eps=1e-05, momentum=0.01, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (2): BasicConv(
          (conv): Conv2d(192, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
          (bn): BatchNorm2d(256, eps=1e-05, momentum=0.01, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (3): BasicConv(
          (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(5, 5), dilation=(5, 5), bias=False)
          (bn): BatchNorm2d(256, eps=1e-05, momentum=0.01, affine=True, track_running_stats=True)
        )
      )
      (ConvLinear): BasicConv(
        (conv): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn): BatchNorm2d(512, eps=1e-05, momentum=0.01, affine=True, track_running_stats=True)
      )
      (shortcut): BasicConv(
        (conv): Conv2d(1024, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)
        (bn): BatchNorm2d(512, eps=1e-05, momentum=0.01, affine=True, track_running_stats=True)
      )
      (relu): ReLU()
    )
  )
  (loc): ModuleList(
    (0): Conv2d(512, 24, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (1): Conv2d(1024, 24, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (2): Conv2d(512, 24, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
  (conf): ModuleList(
    (0): Conv2d(512, 24, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (1): Conv2d(1024, 24, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (2): Conv2d(512, 24, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
  (softmax): Softmax()
)

lib.ssds_train - INFO - Parameters and size:
lib.ssds_train - INFO - base.0.weight: [64, 3, 7, 7]
lib.ssds_train - INFO - base.1.weight: [64]
lib.ssds_train - INFO - base.1.bias: [64]
lib.ssds_train - INFO - base.4.conv1.weight: [64, 64, 1, 1]
lib.ssds_train - INFO - base.4.bn1.weight: [64]
lib.ssds_train - INFO - base.4.bn1.bias: [64]
lib.ssds_train - INFO - base.4.conv2.weight: [64, 64, 3, 3]
lib.ssds_train - INFO - base.4.bn2.weight: [64]
lib.ssds_train - INFO - base.4.bn2.bias: [64]
lib.ssds_train - INFO - base.4.conv3.weight: [256, 64, 1, 1]
lib.ssds_train - INFO - base.4.bn3.weight: [256]
lib.ssds_train - INFO - base.4.bn3.bias: [256]
lib.ssds_train - INFO - base.4.downsample.0.weight: [256, 64, 1, 1]
lib.ssds_train - INFO - base.4.downsample.1.weight: [256]
lib.ssds_train - INFO - base.4.downsample.1.bias: [256]
lib.ssds_train - INFO - base.5.conv1.weight: [64, 256, 1, 1]
lib.ssds_train - INFO - base.5.bn1.weight: [64]
lib.ssds_train - INFO - base.5.bn1.bias: [64]
lib.ssds_train - INFO - base.5.conv2.weight: [64, 64, 3, 3]
lib.ssds_train - INFO - base.5.bn2.weight: [64]
lib.ssds_train - INFO - base.5.bn2.bias: [64]
lib.ssds_train - INFO - base.5.conv3.weight: [256, 64, 1, 1]
lib.ssds_train - INFO - base.5.bn3.weight: [256]
lib.ssds_train - INFO - base.5.bn3.bias: [256]
lib.ssds_train - INFO - base.6.conv1.weight: [64, 256, 1, 1]
lib.ssds_train - INFO - base.6.bn1.weight: [64]
lib.ssds_train - INFO - base.6.bn1.bias: [64]
lib.ssds_train - INFO - base.6.conv2.weight: [64, 64, 3, 3]
lib.ssds_train - INFO - base.6.bn2.weight: [64]
lib.ssds_train - INFO - base.6.bn2.bias: [64]
lib.ssds_train - INFO - base.6.conv3.weight: [256, 64, 1, 1]
lib.ssds_train - INFO - base.6.bn3.weight: [256]
lib.ssds_train - INFO - base.6.bn3.bias: [256]
lib.ssds_train - INFO - base.7.conv1.weight: [128, 256, 1, 1]
lib.ssds_train - INFO - base.7.bn1.weight: [128]
lib.ssds_train - INFO - base.7.bn1.bias: [128]
lib.ssds_train - INFO - base.7.conv2.weight: [128, 128, 3, 3]
lib.ssds_train - INFO - base.7.bn2.weight: [128]
lib.ssds_train - INFO - base.7.bn2.bias: [128]
lib.ssds_train - INFO - base.7.conv3.weight: [512, 128, 1, 1]
lib.ssds_train - INFO - base.7.bn3.weight: [512]
lib.ssds_train - INFO - base.7.bn3.bias: [512]
lib.ssds_train - INFO - base.7.downsample.0.weight: [512, 256, 1, 1]
lib.ssds_train - INFO - base.7.downsample.1.weight: [512]
lib.ssds_train - INFO - base.7.downsample.1.bias: [512]
lib.ssds_train - INFO - base.8.conv1.weight: [128, 512, 1, 1]
lib.ssds_train - INFO - base.8.bn1.weight: [128]
lib.ssds_train - INFO - base.8.bn1.bias: [128]
lib.ssds_train - INFO - base.8.conv2.weight: [128, 128, 3, 3]
lib.ssds_train - INFO - base.8.bn2.weight: [128]
lib.ssds_train - INFO - base.8.bn2.bias: [128]
lib.ssds_train - INFO - base.8.conv3.weight: [512, 128, 1, 1]
lib.ssds_train - INFO - base.8.bn3.weight: [512]
lib.ssds_train - INFO - base.8.bn3.bias: [512]
lib.ssds_train - INFO - base.9.conv1.weight: [128, 512, 1, 1]
lib.ssds_train - INFO - base.9.bn1.weight: [128]
lib.ssds_train - INFO - base.9.bn1.bias: [128]
lib.ssds_train - INFO - base.9.conv2.weight: [128, 128, 3, 3]
lib.ssds_train - INFO - base.9.bn2.weight: [128]
lib.ssds_train - INFO - base.9.bn2.bias: [128]
lib.ssds_train - INFO - base.9.conv3.weight: [512, 128, 1, 1]
lib.ssds_train - INFO - base.9.bn3.weight: [512]
lib.ssds_train - INFO - base.9.bn3.bias: [512]
lib.ssds_train - INFO - base.10.conv1.weight: [128, 512, 1, 1]
lib.ssds_train - INFO - base.10.bn1.weight: [128]
lib.ssds_train - INFO - base.10.bn1.bias: [128]
lib.ssds_train - INFO - base.10.conv2.weight: [128, 128, 3, 3]
lib.ssds_train - INFO - base.10.bn2.weight: [128]
lib.ssds_train - INFO - base.10.bn2.bias: [128]
lib.ssds_train - INFO - base.10.conv3.weight: [512, 128, 1, 1]
lib.ssds_train - INFO - base.10.bn3.weight: [512]
lib.ssds_train - INFO - base.10.bn3.bias: [512]
lib.ssds_train - INFO - base.11.conv1.weight: [256, 512, 1, 1]
lib.ssds_train - INFO - base.11.bn1.weight: [256]
lib.ssds_train - INFO - base.11.bn1.bias: [256]
lib.ssds_train - INFO - base.11.conv2.weight: [256, 256, 3, 3]
lib.ssds_train - INFO - base.11.bn2.weight: [256]
lib.ssds_train - INFO - base.11.bn2.bias: [256]
lib.ssds_train - INFO - base.11.conv3.weight: [1024, 256, 1, 1]
lib.ssds_train - INFO - base.11.bn3.weight: [1024]
lib.ssds_train - INFO - base.11.bn3.bias: [1024]
lib.ssds_train - INFO - base.11.downsample.0.weight: [1024, 512, 1, 1]
lib.ssds_train - INFO - base.11.downsample.1.weight: [1024]
lib.ssds_train - INFO - base.11.downsample.1.bias: [1024]
lib.ssds_train - INFO - base.12.conv1.weight: [256, 1024, 1, 1]
lib.ssds_train - INFO - base.12.bn1.weight: [256]
lib.ssds_train - INFO - base.12.bn1.bias: [256]
lib.ssds_train - INFO - base.12.conv2.weight: [256, 256, 3, 3]
lib.ssds_train - INFO - base.12.bn2.weight: [256]
lib.ssds_train - INFO - base.12.bn2.bias: [256]
lib.ssds_train - INFO - base.12.conv3.weight: [1024, 256, 1, 1]
lib.ssds_train - INFO - base.12.bn3.weight: [1024]
lib.ssds_train - INFO - base.12.bn3.bias: [1024]
lib.ssds_train - INFO - base.13.conv1.weight: [256, 1024, 1, 1]
lib.ssds_train - INFO - base.13.bn1.weight: [256]
lib.ssds_train - INFO - base.13.bn1.bias: [256]
lib.ssds_train - INFO - base.13.conv2.weight: [256, 256, 3, 3]
lib.ssds_train - INFO - base.13.bn2.weight: [256]
lib.ssds_train - INFO - base.13.bn2.bias: [256]
lib.ssds_train - INFO - base.13.conv3.weight: [1024, 256, 1, 1]
lib.ssds_train - INFO - base.13.bn3.weight: [1024]
lib.ssds_train - INFO - base.13.bn3.bias: [1024]
lib.ssds_train - INFO - base.14.conv1.weight: [256, 1024, 1, 1]
lib.ssds_train - INFO - base.14.bn1.weight: [256]
lib.ssds_train - INFO - base.14.bn1.bias: [256]
lib.ssds_train - INFO - base.14.conv2.weight: [256, 256, 3, 3]
lib.ssds_train - INFO - base.14.bn2.weight: [256]
lib.ssds_train - INFO - base.14.bn2.bias: [256]
lib.ssds_train - INFO - base.14.conv3.weight: [1024, 256, 1, 1]
lib.ssds_train - INFO - base.14.bn3.weight: [1024]
lib.ssds_train - INFO - base.14.bn3.bias: [1024]
lib.ssds_train - INFO - base.15.conv1.weight: [256, 1024, 1, 1]
lib.ssds_train - INFO - base.15.bn1.weight: [256]
lib.ssds_train - INFO - base.15.bn1.bias: [256]
lib.ssds_train - INFO - base.15.conv2.weight: [256, 256, 3, 3]
lib.ssds_train - INFO - base.15.bn2.weight: [256]
lib.ssds_train - INFO - base.15.bn2.bias: [256]
lib.ssds_train - INFO - base.15.conv3.weight: [1024, 256, 1, 1]
lib.ssds_train - INFO - base.15.bn3.weight: [1024]
lib.ssds_train - INFO - base.15.bn3.bias: [1024]
lib.ssds_train - INFO - base.16.conv1.weight: [256, 1024, 1, 1]
lib.ssds_train - INFO - base.16.bn1.weight: [256]
lib.ssds_train - INFO - base.16.bn1.bias: [256]
lib.ssds_train - INFO - base.16.conv2.weight: [256, 256, 3, 3]
lib.ssds_train - INFO - base.16.bn2.weight: [256]
lib.ssds_train - INFO - base.16.bn2.bias: [256]
lib.ssds_train - INFO - base.16.conv3.weight: [1024, 256, 1, 1]
lib.ssds_train - INFO - base.16.bn3.weight: [1024]
lib.ssds_train - INFO - base.16.bn3.bias: [1024]
lib.ssds_train - INFO - norm.0.branch0.0.conv.weight: [128, 512, 1, 1]
lib.ssds_train - INFO - norm.0.branch0.0.bn.weight: [128]
lib.ssds_train - INFO - norm.0.branch0.0.bn.bias: [128]
lib.ssds_train - INFO - norm.0.branch0.1.conv.weight: [128, 128, 3, 3]
lib.ssds_train - INFO - norm.0.branch0.1.bn.weight: [128]
lib.ssds_train - INFO - norm.0.branch0.1.bn.bias: [128]
lib.ssds_train - INFO - norm.0.branch1.0.conv.weight: [128, 512, 1, 1]
lib.ssds_train - INFO - norm.0.branch1.0.bn.weight: [128]
lib.ssds_train - INFO - norm.0.branch1.0.bn.bias: [128]
lib.ssds_train - INFO - norm.0.branch1.1.conv.weight: [128, 128, 3, 1]
lib.ssds_train - INFO - norm.0.branch1.1.bn.weight: [128]
lib.ssds_train - INFO - norm.0.branch1.1.bn.bias: [128]
lib.ssds_train - INFO - norm.0.branch1.2.conv.weight: [128, 128, 3, 3]
lib.ssds_train - INFO - norm.0.branch1.2.bn.weight: [128]
lib.ssds_train - INFO - norm.0.branch1.2.bn.bias: [128]
lib.ssds_train - INFO - norm.0.branch2.0.conv.weight: [128, 512, 1, 1]
lib.ssds_train - INFO - norm.0.branch2.0.bn.weight: [128]
lib.ssds_train - INFO - norm.0.branch2.0.bn.bias: [128]
lib.ssds_train - INFO - norm.0.branch2.1.conv.weight: [128, 128, 1, 3]
lib.ssds_train - INFO - norm.0.branch2.1.bn.weight: [128]
lib.ssds_train - INFO - norm.0.branch2.1.bn.bias: [128]
lib.ssds_train - INFO - norm.0.branch2.2.conv.weight: [128, 128, 3, 3]
lib.ssds_train - INFO - norm.0.branch2.2.bn.weight: [128]
lib.ssds_train - INFO - norm.0.branch2.2.bn.bias: [128]
lib.ssds_train - INFO - norm.0.branch3.0.conv.weight: [64, 512, 1, 1]
lib.ssds_train - INFO - norm.0.branch3.0.bn.weight: [64]
lib.ssds_train - INFO - norm.0.branch3.0.bn.bias: [64]
lib.ssds_train - INFO - norm.0.branch3.1.conv.weight: [96, 64, 1, 3]
lib.ssds_train - INFO - norm.0.branch3.1.bn.weight: [96]
lib.ssds_train - INFO - norm.0.branch3.1.bn.bias: [96]
lib.ssds_train - INFO - norm.0.branch3.2.conv.weight: [128, 96, 3, 1]
lib.ssds_train - INFO - norm.0.branch3.2.bn.weight: [128]
lib.ssds_train - INFO - norm.0.branch3.2.bn.bias: [128]
lib.ssds_train - INFO - norm.0.branch3.3.conv.weight: [128, 128, 3, 3]
lib.ssds_train - INFO - norm.0.branch3.3.bn.weight: [128]
lib.ssds_train - INFO - norm.0.branch3.3.bn.bias: [128]
lib.ssds_train - INFO - norm.0.ConvLinear.conv.weight: [512, 512, 1, 1]
lib.ssds_train - INFO - norm.0.ConvLinear.bn.weight: [512]
lib.ssds_train - INFO - norm.0.ConvLinear.bn.bias: [512]
lib.ssds_train - INFO - norm.0.shortcut.conv.weight: [512, 512, 1, 1]
lib.ssds_train - INFO - norm.0.shortcut.bn.weight: [512]
lib.ssds_train - INFO - norm.0.shortcut.bn.bias: [512]
lib.ssds_train - INFO - norm.1.branch0.0.conv.weight: [128, 1024, 1, 1]
lib.ssds_train - INFO - norm.1.branch0.0.bn.weight: [128]
lib.ssds_train - INFO - norm.1.branch0.0.bn.bias: [128]
lib.ssds_train - INFO - norm.1.branch0.1.conv.weight: [256, 128, 3, 3]
lib.ssds_train - INFO - norm.1.branch0.1.bn.weight: [256]
lib.ssds_train - INFO - norm.1.branch0.1.bn.bias: [256]
lib.ssds_train - INFO - norm.1.branch0.2.conv.weight: [256, 256, 3, 3]
lib.ssds_train - INFO - norm.1.branch0.2.bn.weight: [256]
lib.ssds_train - INFO - norm.1.branch0.2.bn.bias: [256]
lib.ssds_train - INFO - norm.1.branch1.0.conv.weight: [128, 1024, 1, 1]
lib.ssds_train - INFO - norm.1.branch1.0.bn.weight: [128]
lib.ssds_train - INFO - norm.1.branch1.0.bn.bias: [128]
lib.ssds_train - INFO - norm.1.branch1.1.conv.weight: [192, 128, 3, 3]
lib.ssds_train - INFO - norm.1.branch1.1.bn.weight: [192]
lib.ssds_train - INFO - norm.1.branch1.1.bn.bias: [192]
lib.ssds_train - INFO - norm.1.branch1.2.conv.weight: [256, 192, 3, 3]
lib.ssds_train - INFO - norm.1.branch1.2.bn.weight: [256]
lib.ssds_train - INFO - norm.1.branch1.2.bn.bias: [256]
lib.ssds_train - INFO - norm.1.branch1.3.conv.weight: [256, 256, 3, 3]
lib.ssds_train - INFO - norm.1.branch1.3.bn.weight: [256]
lib.ssds_train - INFO - norm.1.branch1.3.bn.bias: [256]
lib.ssds_train - INFO - norm.1.ConvLinear.conv.weight: [1024, 512, 1, 1]
lib.ssds_train - INFO - norm.1.ConvLinear.bn.weight: [1024]
lib.ssds_train - INFO - norm.1.ConvLinear.bn.bias: [1024]
lib.ssds_train - INFO - norm.1.shortcut.conv.weight: [1024, 1024, 1, 1]
lib.ssds_train - INFO - norm.1.shortcut.bn.weight: [1024]
lib.ssds_train - INFO - norm.1.shortcut.bn.bias: [1024]
lib.ssds_train - INFO - extras.0.branch0.0.conv.weight: [128, 1024, 1, 1]
lib.ssds_train - INFO - extras.0.branch0.0.bn.weight: [128]
lib.ssds_train - INFO - extras.0.branch0.0.bn.bias: [128]
lib.ssds_train - INFO - extras.0.branch0.1.conv.weight: [256, 128, 3, 3]
lib.ssds_train - INFO - extras.0.branch0.1.bn.weight: [256]
lib.ssds_train - INFO - extras.0.branch0.1.bn.bias: [256]
lib.ssds_train - INFO - extras.0.branch0.2.conv.weight: [256, 256, 3, 3]
lib.ssds_train - INFO - extras.0.branch0.2.bn.weight: [256]
lib.ssds_train - INFO - extras.0.branch0.2.bn.bias: [256]
lib.ssds_train - INFO - extras.0.branch1.0.conv.weight: [128, 1024, 1, 1]
lib.ssds_train - INFO - extras.0.branch1.0.bn.weight: [128]
lib.ssds_train - INFO - extras.0.branch1.0.bn.bias: [128]
lib.ssds_train - INFO - extras.0.branch1.1.conv.weight: [192, 128, 3, 3]
lib.ssds_train - INFO - extras.0.branch1.1.bn.weight: [192]
lib.ssds_train - INFO - extras.0.branch1.1.bn.bias: [192]
lib.ssds_train - INFO - extras.0.branch1.2.conv.weight: [256, 192, 3, 3]
lib.ssds_train - INFO - extras.0.branch1.2.bn.weight: [256]
lib.ssds_train - INFO - extras.0.branch1.2.bn.bias: [256]
lib.ssds_train - INFO - extras.0.branch1.3.conv.weight: [256, 256, 3, 3]
lib.ssds_train - INFO - extras.0.branch1.3.bn.weight: [256]
lib.ssds_train - INFO - extras.0.branch1.3.bn.bias: [256]
lib.ssds_train - INFO - extras.0.ConvLinear.conv.weight: [512, 512, 1, 1]
lib.ssds_train - INFO - extras.0.ConvLinear.bn.weight: [512]
lib.ssds_train - INFO - extras.0.ConvLinear.bn.bias: [512]
lib.ssds_train - INFO - extras.0.shortcut.conv.weight: [512, 1024, 1, 1]
lib.ssds_train - INFO - extras.0.shortcut.bn.weight: [512]
lib.ssds_train - INFO - extras.0.shortcut.bn.bias: [512]
lib.ssds_train - INFO - loc.0.weight: [24, 512, 3, 3]
lib.ssds_train - INFO - loc.0.bias: [24]
lib.ssds_train - INFO - loc.1.weight: [24, 1024, 3, 3]
lib.ssds_train - INFO - loc.1.bias: [24]
lib.ssds_train - INFO - loc.2.weight: [24, 512, 3, 3]
lib.ssds_train - INFO - loc.2.bias: [24]
lib.ssds_train - INFO - conf.0.weight: [24, 512, 3, 3]
lib.ssds_train - INFO - conf.0.bias: [24]
lib.ssds_train - INFO - conf.1.weight: [24, 1024, 3, 3]
lib.ssds_train - INFO - conf.1.bias: [24]
lib.ssds_train - INFO - conf.2.weight: [24, 512, 3, 3]
lib.ssds_train - INFO - conf.2.bias: [24]
lib.ssds_train - DEBUG - Trainable scope: base,norm,extras,loc,conf
lib.ssds_train - INFO - => loading checkpoint './experiments/models/rfb_resnet50_cones/rfb_resnet_50_cones_epoch_300.pth'
/home/gfr_admin/lucas/ssds.pytorch/lib/utils/config_parse.py:280: YAMLLoadWarning: calling yaml.load() without Loader=... is deprecated, as the default Loader is unsafe. Please read https://msg.pyyaml.org/load for full details.
  yaml_cfg = AttrDict(yaml.load(f))
/home/gfr_admin/lucas/ssds.pytorch/lib/ssds_train.py:50: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  self.priors = torch.tensor(self.priorbox.forward())
