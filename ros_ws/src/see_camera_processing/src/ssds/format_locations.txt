demo.py:        cv2.rectangle(image, (int(coords[0]), int(coords[1])), (int(coords[2]), int(coords[3])), COLORS[labels % 3], 2)
demo.py:        cv2.putText(image, '{label}: {score:.3f}'.format(label=VOC_CLASSES[labels], score=scores), (int(coords[0]), int(coords[1])), FONT, 0.5, COLORS[labels % 3], 2)
demo.py:            cv2.rectangle(image, (int(coords[0]), int(coords[1])), (int(coords[2]), int(coords[3])), COLORS[labels % 3], 2)
demo.py:            cv2.putText(image, '{label}: {score:.3f}'.format(label=CONE_CLASSES[labels], score=scores), (int(coords[0]), int(coords[1])), FONT, 0.5, COLORS[labels % 3], 2)
demo.py:            if i % 20 == 0: 
lib/dataset/dataset_factory.py:        raise ValueError('The dataset unknown %s' % name)
lib/dataset/voc_eval.py:            if i % 100 == 0:
lib/dataset/voc.py:            self.root, dataset_name, 'SegmentationClass', '%s.png')
lib/dataset/voc.py:            self.root, dataset_name, 'JPEGImages', '%s.jpg')
lib/dataset/voc.py:            self.root, dataset_name, 'ImageSets', 'Segmentation', '%s.txt')
lib/dataset/voc.py:        with open(self._imgsetpath % self.image_set) as f:
lib/dataset/voc.py:        target = Image.open(self._annopath % img_id).convert('RGB')
lib/dataset/voc.py:        img = Image.open(self._imgpath % img_id).convert('RGB')
lib/dataset/voc.py:                #cur_pt = cur_pt / width if i % 2 == 0 else cur_pt / height
lib/dataset/voc.py:        self._annopath = os.path.join('%s', 'Annotations', '%s.xml')
lib/dataset/voc.py:        self._imgpath = os.path.join('%s', 'JPEGImages', '%s.jpg')
lib/dataset/voc.py:        target = ET.parse(self._annopath % img_id).getroot()
lib/dataset/voc.py:        img = cv2.imread(self._imgpath % img_id, cv2.IMREAD_COLOR)
lib/dataset/voc.py:        return cv2.imread(self._imgpath % img_id, cv2.IMREAD_COLOR)
lib/dataset/voc.py:        anno = ET.parse(self._annopath % img_id).getroot()
lib/dataset/voc.py:        img = cv2.imread(self._imgpath % img_id, cv2.IMREAD_COLOR)
lib/dataset/voc.py:        anno = ET.parse(self._annopath % img_id).getroot()
lib/utils/dark2pth.py:            print('%5d %-6s %4d  %d x %d / %d   %3d x %3d x%4d   ->   %3d x %3d x%4d' % (ind, 'conv', filters, kernel_size, kernel_size, stride, prev_width, prev_height, prev_filters, width, height, filters))
lib/utils/dark2pth.py:            print('%5d %-6s       %d x %d / %d   %3d x %3d x%4d   ->   %3d x %3d x%4d' % (ind, 'max', pool_size, pool_size, stride, prev_width, prev_height, prev_filters, width, height, filters))
lib/utils/dark2pth.py:            print('%5d %-6s                   %3d x %3d x%4d   ->  %3d' % (ind, 'avg', prev_width, prev_height, prev_filters,  prev_filters))
lib/utils/dark2pth.py:            print('%5d %-6s                                    ->  %3d' % (ind, 'softmax', prev_filters))
lib/utils/dark2pth.py:            print('%5d %-6s                                     ->  %3d' % (ind, 'cost', prev_filters))
lib/utils/dark2pth.py:            print('%5d %-6s             / %d   %3d x %3d x%4d   ->   %3d x %3d x%4d' % (ind, 'reorg', stride, prev_width, prev_height, prev_filters, width, height, filters))
lib/utils/dark2pth.py:                print('%5d %-6s %d' % (ind, 'route', layers[0]))
lib/utils/dark2pth.py:                print('%5d %-6s %d %d' % (ind, 'route', layers[0], layers[1]))
lib/utils/dark2pth.py:            print('%5d %-6s' % (ind, 'detection'))
lib/utils/dark2pth.py:            print('%5d %-6s' % (ind, 'yolo'))
lib/utils/dark2pth.py:            print('%5d %-6s           / %d   %3d x %3d x%4d   ->   %3d x %3d x%4d' % (ind, 'upsample', stride, prev_width, prev_height, prev_filters, width, height, filters))
lib/utils/dark2pth.py:            print('%5d %-6s %d' % (ind, 'shortcut', from_id))
lib/utils/dark2pth.py:            print('%5d %-6s                            %d  ->  %3d' % (ind, 'connected', prev_filters,  filters))
lib/utils/dark2pth.py:            print('unknown type %s' % (block['type']))
lib/utils/dark2pth.py:            print('%5d %-6s %4d  %d x %d / %d   %3d x %3d x%4d   ->   %3d x %3d x%4d' % (ind, 'conv', filters, kernel_size, kernel_size, stride, prev_width, prev_height, prev_filters, width, height, filters))
lib/utils/dark2pth.py:            print('%5d %-6s       %d x %d / %d   %3d x %3d x%4d   ->   %3d x %3d x%4d' % (ind, 'max', pool_size, pool_size, stride, prev_width, prev_height, prev_filters, width, height, filters))
lib/utils/dark2pth.py:            print('%5d %-6s                   %3d x %3d x%4d   ->  %3d' % (ind, 'avg', prev_width, prev_height, prev_filters,  prev_filters))
lib/utils/dark2pth.py:            print('%5d %-6s                                    ->  %3d' % (ind, 'softmax', prev_filters))
lib/utils/dark2pth.py:            print('%5d %-6s                                     ->  %3d' % (ind, 'cost', prev_filters))
lib/utils/dark2pth.py:            print('%5d %-6s             / %d   %3d x %3d x%4d   ->   %3d x %3d x%4d' % (ind, 'reorg', stride, prev_width, prev_height, prev_filters, width, height, filters))
lib/utils/dark2pth.py:                print('%5d %-6s %d' % (ind, 'route', layers[0]))
lib/utils/dark2pth.py:                print('%5d %-6s %d %d' % (ind, 'route', layers[0], layers[1]))
lib/utils/dark2pth.py:            print('%5d %-6s' % (ind, 'detection'))
lib/utils/dark2pth.py:            print('%5d %-6s' % (ind, 'yolo'))
lib/utils/dark2pth.py:            print('%5d %-6s           / %d   %3d x %3d x%4d   ->   %3d x %3d x%4d' % (ind, 'upsample', stride, prev_width, prev_height, prev_filters, width, height, filters))
lib/utils/dark2pth.py:            print('%5d %-6s %d' % (ind, 'shortcut', from_id))
lib/utils/dark2pth.py:            print('%5d %-6s                            %d  ->  %3d' % (ind, 'connected', prev_filters,  filters))
lib/utils/dark2pth.py:            print('unknown type %s' % (block['type']))
lib/utils/model_logging.py:    debug_h.setFormatter(  logging.Formatter("%(name)s:%(lineno)s - %(levelname) %(message)s"))
lib/utils/model_logging.py:    info_h.setFormatter(   logging.Formatter("%(name)s:%(lineno)s -  %(message)s"))
lib/utils/model_logging.py:    warning_h.setFormatter(logging.Formatter("%(name)s:%(lineno)s - %(levelname) %(message)s"))
lib/utils/model_logging.py:    stream_h.setFormatter( logging.Formatter('%(name)s - %(levelname)s - %(message)s'))
lib/utils/visualize_utils.py:        row = i % rows
lib/utils/data_augment.py:        tmp %= 180
lib/ssds_train.py:            if epoch % cfg.TRAIN.CHECKPOINTS_EPOCHS == 0:
lib/train.py:            if epoch % cfg.TRAIN.CHECKPOINTS_EPOCHS == 0:
lib/modeling/ssds/fssd_lite.py:            # if k % 2 == 1:
lib/modeling/ssds/fssd.py:            if k % 2 == 1:
lib/modeling/ssds/ssd_lite.py:            # if k % 2 == 1:
lib/modeling/ssds/rfb_lite.py:            if k < self.indicator or k % 2 == 0:
lib/modeling/ssds/rfb.py:            if k < self.indicator or k % 2 == 1:
lib/modeling/ssds/ssd.py:            if self.lite or k % 2 == 1:
lib/ssds_validation.py:            if epoch % cfg.TRAIN.CHECKPOINTS_EPOCHS == 0:
ssds_train.py:            if epoch % cfg.TRAIN.CHECKPOINTS_EPOCHS == 0:
